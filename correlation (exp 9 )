AIM:Write a program to implement correlation and regression techniques by using python.
Algorithm:
1.Import the libraries.
2.Read the csv file and let the variables (x,y).
3.Find the sum of the means (x,y).
4.Find zip-li, val, b&bo
5.Assign the test and train dataset split.
6.Create the machine Learning linear regression model using the train dataset.
7.plotting classification data in matplotlib.
Program:
import matloplib.pyplot as plt
import pandas as pd
import numpy as np
experience = np.array([3.4,4.2,5.0,1.6,5.2,2.6,7.2,8.2,6.1,7.3,3.4,8.5,7.4,6.2,6.6])
salary = np.array([3.1,5.7,4.2,2.3,5.3,2.4,7.6,6.4,6.5,7.4,3.5,9.3,8.2,4.6,7.2])
plt.scatter(experience,salary,color='red')
plt.xlabel("Experience")
plt.ylabel("Salary")
plt.show 
a0 = 0 #intercept
a1 = 0 #slope
lr = 0.0001 #learning rate
iterations = 1000 #Number of iterations
error = [] #Error array to calculate cost for each iterations
for itr in range(iterations):
error_cost = 0
cost_a0 = 0
cost_a1 = 0
for i in range(len(experience)):
y_pred = a0+a1*experience[i] #predict value for given x
error_cost = error_cost + (salary[i]-y_pred)**2
for j in range(len(experience)):
partial_wrt_a0 = -2*(salary[j] -(a0 + a1 * experience[j]))
partial_wrt_a1 = (-2*experience[j]) * (salary[j] â€“ (a0 + a1 * experience[j])) #partial derivative with respect to a1
cost_a0 = cost_a0 + partial_wrt_a0
cost_a1 = cost_a1 + partial_wrt_a1 
a0 = a0 - lr * cost_a0 #update a0
a1 = a1 - lr * cost_a1 #update a1
print (itr,a0,a1) #check iteration and updated a0 and a1
error.append (error_cost)
print (a0)
print (a1)
plt.figure(figsize=(10,5))
plt.plot (np.arange(1,len(error)+1),error,color='red',linewidth=5)
plt.title("Iteration Vs Error")
plt.xlabel("Iterations")
plt.ylabel("Error")
pred = a0+a1 * experience
print (pred)
plt.scatter(experience,salary,color='red')
plt.plot(experience,pred,color ='green')
plt.xlabel('experience')
plt.ylabel('salary')
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
experience = experience.reshape (-1,1)
model = LinearRegression()
model.fit(experience,salary)
salary_pred = model.predict(experience)
Mse = mean_squared_error(salary,salary_pred)
print ("Slope", model.coef_)
print ("Intercept", model.intercept_)
print ("MSE", Mse)
Output:
Slope [0.94194449]
Intercept 0.374186775238746
MSE 0.7364342954183716
